# Task 1
# Write a decorator that prints a function with arguments passed to it.
# NOTE! It should print the function, not the result of its execution!
# For
# example:
# "add called with 4, 5"
#
# def logger(func):
#     pass
#
# @logger
# def add(x, y):
#     return x + y
#
# @logger
# def square_all(*args):
#     return [arg ** 2 for arg in args]

from functools import wraps


def logger(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        print(f"The name of function is: {func.__name__}.")
        func(*args, **kwargs)
        print(f'The arguments of function are:')
        print(*args, sep=',')
        print(**kwargs, sep=',')
    return wrapper


@logger
def add(x, y):
    return x + y


@logger
def square_all(*args):
    return [arg ** 2 for arg in args]


try:
    add(1, 2)
    square_all(2, 3, 4)
except NameError:
    print('Use only numbers like arguments!')
