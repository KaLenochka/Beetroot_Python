# Task 2
# Mathematician
# Implement a class Mathematician which is a helper class for doing math operations on lists
#
# The class doesn't take any attributes and only has methods:
# ** square_nums (takes a list of integers and returns the list of squares)
# ** remove_positives (takes a list of integers and returns it without positive numbers)
# ** filter_leaps (takes a list of dates (integers) and removes those that are not 'leap years')
# '''
# class Mathematician:
#     pass
#
# m = Mathematician() - ИЗМЕНИЛА ЭТО УСЛОВИЕ, ЧТОБ ИСПОЛЬЗОВАТЬ НАСЛЕДОВАНИЕ!
# assert m.square_nums([7, 11, 5, 4]) == [49, 121, 25, 16]
# assert m.remove_positives([26, -11, -8, 13, -90]) == [-11, -8, -90]
# assert m.filter_leaps([2001, 1884, 1995, 2003, 2020]) == [1884, 2020]
# '''

class Mathematician:
    '''The helper class for doing math operations on lists.
    The class doesn't take any attributes and only has methods.'''

    # The method takes a list of integers and returns the list of squares
    def square_nums(self, list_int):
        try:
            list_sq = []
            for number in list_int:
                list_sq.append(number ** 2)
            return list_sq
        except TypeError:
            print('The list has to contain only integers!!!')

    # The method takes a list of integers and returns it without positive numbers
    def remove_positives(self, list_int):
        try:
            list_pos = []
            for number in list_int:
                if number <= 0:
                    list_pos.append(number)
            return list_pos
        except TypeError:
            print('The list has to contain only integers!!!')

    # The method takes a list of dates (integers) and removes those that are not 'leap years'
    def filter_leaps(self, list_int):
        try:
            list_leap = []
            for number in list_int:
                if (number % 4 == 0 and number % 100 != 0) or (number % 4 == 0 and number % 100 == 0 and number % 400 == 0):
                    list_leap.append(number)
            return list_leap
        except TypeError:
            print('The list has to contain only integers!!!')


class DataForMath(Mathematician):
    '''The class of lists, on which we'll make the operations'''

    def __init__(self):
        self.list = list


m = DataForMath()
print(m.square_nums([7, 11, 5, 4]))
print(m.remove_positives([26, -11, -8, 13, -90]))
print(m.filter_leaps([2001, 1884, 1995, 2003, 2020]))
