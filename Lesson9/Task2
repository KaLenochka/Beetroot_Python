# Task 2
# Extend Phonebook application
# Functionality of Phonebook application:

# Add new entries
# Search by first name
# Search by last name
# Search by full name
# Search by telephone number
# Search by city or state
# Delete a record for a given telephone number
# Update a record for a given telephone number
# An option to exit the program

# The first argument to the application should be the name of the phonebook.
# Application should load JSON data, if it is present in the folder with application, else raise an error.
# After the user exits, all data should be saved to loaded JSON.

import json
import os
import sys

PB_DEFAULT = 'phonebook.json'


def validate_phonenumber(number):
    '''
    The function checks the telephone number to be in correct format (only 10 numbers).
    :param number: telephone number to make the check.
    :return: number
    '''

    if len(number) == 10 and number.isdigit():
        return number
    else:
        raise ValueError('Your input of phone number is not correct! Enter 10 numbers, please!: ')


def get_phonenumber_from_user(msg):
    '''
    The function takes the telephone number as input and makes the validation of it to be in correct format(10 numbers).
    :param msg: The text for input string.
    :return: Validated telephone number.
    '''

    while True:
        try:
            return validate_phonenumber(input(msg))
        except ValueError as error_msg:
            print(error_msg)


def validate_lit_data_from_user(data):
    '''
    The function takes the string and checks it not to be empty (at least 1 character).
    :param data: The string.
    :return: Validated data.
    '''

    if len(data) >= 1:
        return data
    else:
        raise ValueError('Your input is empty. Enter at least 1 character, please!: ')


def get_lit_data_from_user(msg):
    '''
    The function takes the string as input and makes the validation of it not to be empty.

    :param msg: The text for user in input string.
    :return: Validated string.
    '''

    while True:
        try:
            return validate_lit_data_from_user(input(msg))
        except ValueError as error_msg:
            print(error_msg)


def search_by_lit_data(param, msg):
    '''
    The function takes the text like input and searches it among the values of dictionary (the contact parameters).
    :param param: The name of parameter in which function has to make a search (ex:'first_name', 'city' etc)
    :param msg: The text for user in input string.
    :return: None
    '''

    data = get_lit_data_from_user(msg).capitalize()
    i = 0  # i is a counter
    a = 0  # a is a counter
    for contact in data_json:
        nested_dict = list(data_json.values())
        if nested_dict[i][param] == data:
            a += 1
            print(contact, data_json[contact])
        i += 1
    if a == 0:
        print(f'Data {data} not found')
    else:
        print(f'{a} record(s) with the data {data} in {file_name}.')


def search_by_phonenumber(msg):
    '''
    Function searches the telephone number in the phonebook, which user enters like input.
    :param msg: The text for user in input string.
    :return: Telephone number.
    '''

    phonenumber = get_phonenumber_from_user(msg)
    searched_phonenumber = data_json.get(phonenumber, ['The telephone number not found.'])
    print(phonenumber, searched_phonenumber)
    return phonenumber


def add_new_contact():
    '''
    The function adds new contact to the phonebook.
    :return: The whole phonebook with new contact (data_json).
    '''

    new_phone_number = get_phonenumber_from_user('Enter 10 numbers of phone number, you want to save: ')
    new_first_name = get_lit_data_from_user('Enter the first name of contact: ').capitalize()
    new_last_name = get_lit_data_from_user('Enter the last name of contact: ').capitalize()
    new_city = get_lit_data_from_user('Enter the city of contact: ').capitalize()

    data_json[new_phone_number] = {
        'first_name': new_first_name,
        'last_name': new_last_name,
        'city': new_city
    }
    print('New contact added successfully!')
    return data_json


def search_by_fullname():
    '''
    The function takes the full name like input and searches it among the values of dictionary (the contact parameters).

    :return: None
    '''

    data1 = get_lit_data_from_user('Enter the first name of contact you are searching: ').capitalize()
    data2 = get_lit_data_from_user('Enter the last name of contact you are searching: ').capitalize()

    i = 0  # i is a counter
    a = 0  # a is a counter
    for contact in data_json:
        nested_dict = list(data_json.values())
        if nested_dict[i]['first_name'] == data1 and nested_dict[i]['last_name'] == data2:
            a += 1
            print(contact, data_json[contact])
        i += 1
    if a == 0:
        print(f'Data {data1} {data2} not found.')
    else:
        print(f'{a} record(s) with the data {data1} {data2} in {file_name}.')


def del_contact():
    '''
    The function searches the contact by the telephone number and deletes it.
    :return: The whole phonebook without deleted contact (data_json).
    '''

    res = data_json.pop(get_phonenumber_from_user('Enter the phone number to delete: '))
    print(f'{res}\n contact deleted')
    return data_json


def edit_contact():
    '''
    The function searches the contact by the telephone number and edits(rewrites) it.
    :return: The whole phonebook without edited contact (data_json).
    '''

    search_for_change_phone = get_phonenumber_from_user('Enter 10 numbers of phone number, you want to change: ')
    change_first_name = get_lit_data_from_user('Enter the first name of contact, you want to change: ').capitalize()
    change_last_name = get_lit_data_from_user('Enter the last name of contact, you want to change: ').capitalize()
    change_city = get_lit_data_from_user('Enter the city of contact, you want to change: ').capitalize()
    change_phone_number = get_phonenumber_from_user('Enter the new phone number: ')

    if search_for_change_phone != change_phone_number:
        res = data_json.pop(search_for_change_phone)
    data_json[change_phone_number] = {
        'first_name': change_first_name,
        'last_name': change_last_name,
        'city': change_city}
    print(f'The contact {change_phone_number} edited')
    return data_json


def user_exit():
    '''
    The function write all changes into json-file and quit.
    :return: The whole phonebook with all changes in it (data_json).
    '''

    with open(file_name, 'w') as file:
        json.dump(data_json, file, ensure_ascii=False, indent=4)
    return data_json


def phonebook_func():
    '''
    The main function of the code. Contains menu for user and works depending on users choice.
    :return: None.
    '''

    list_of_func = 'Functionality.txt'

    try:
        if not os.path.isfile(list_of_func):
            raise OSError("File 'Functionality.txt' is not found.")

        with open('Functionality.txt') as list_of_func:
            print(list_of_func.read())

    except OSError as error_msg:
        print(error_msg)

    answer = input('Make your choice, please: ')
    while not answer.isdigit() or (int(answer) < 1 or int(answer) > 9):
        print('Enter only numbers from 1 to 9, please!: ')
        answer = input('Make your choice, please: ')

    if answer == '1':  # Add new entries (#1)
        add_new_contact()
        phonebook_func()

    elif answer == '2':  # Search by first name  (#2)
        search_by_lit_data('first_name', 'Enter the name of contact, which you are searching: ')
        phonebook_func()

    elif answer == '3':  # Search by last name (#3)
        search_by_lit_data('last_name', 'Enter the last name of contact, which you are searching: ')
        phonebook_func()

    elif answer == '4':  # Search by full name (#4)
        search_by_fullname()
        phonebook_func()

    elif answer == '5':  # Search by telephone number (#5)
        search_by_phonenumber('Enter the telephone number of contact, which you are searching: ')
        phonebook_func()

    elif answer == '6':  # Search by city or state (#6)
        search_by_lit_data('city', 'Enter the city of contact, which you are searching: ')
        phonebook_func()

    elif answer == '7':  # Delete a record for a given telephone number (#7)
        del_contact()
        phonebook_func()

    elif answer == '8':  # Update a record for a given telephone number (#8)
        edit_contact()
        phonebook_func()

    elif answer == '9':  # An option to exit the program (#9)
        user_exit()


if len(sys.argv) < 2:
    print('You didn\'t indicate the name of file with the phonebook')
    file_name = PB_DEFAULT
else:
    file_name = sys.argv[1].lower()
    if file_name.rfind('json') == -1:
        file_name += '.json'
print(f'The phonebook {file_name} is using.')

try:
    if not os.path.isfile(file_name):
        raise OSError('File *.json is not found in the specified folder.')

    with open(file_name, 'r') as file:
        data_json = json.load(file)

    phonebook_func()


except OSError as error_msg:
    print(error_msg)
    
